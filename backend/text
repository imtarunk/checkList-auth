my signup Code

app.post("/signup", async (req, res) => {
  const userSchema = await z.object({
    name: z.string().min(2).max(50),
    email: z.string().min(5).max(100).refine("@").refine(".com"),
    password: z
      .string()
      .min(8, { message: "Password must be at least 8 characters long" }) // Correct usage of min
      .max(100, { message: "Password cannot exceed 100 characters" }) // Correct usage of max
      .regex(/[A-Z]/, { message: "uppercaseErrorMessage" }) // Checks for at least one uppercase letter
      .regex(/[a-z]/, { message: "lowercaseErrorMessage" }) // Checks for at least one lowercase letter
      .regex(/[0-9]/, { message: "numberErrorMessage" }) // Checks for at least one number
      .regex(/[!@#$%^&*]/, { message: "specialCharacterErrorMessage" }),
    // Checks for at least one special character
  });

  const result = userSchema.safeParse(req.body);

  if (!result.success) {
    return res.status(400).json(result.error);
  }
const {name,email,password}= result.data;
  try {
    if (!name || !email || !password) {
      return res.status(400).json({
        message: "Entre your email and password",
      });
    }
    const hash = await bcrypt.hashSync(password, saltRounds);

    await UserModule.create({
      name,
      email,
      password: hash,
    });

    res.status(200).json({
      success: true,
      message: "user register successfully",
    });
  } catch (error) {
    console.log(error);
  }
});



// my login code 
app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    if (!email || !password) {
      res.json({
        message: "Entre you register email and password",
      });
    }

    const user = await UserModule.findOne({
      email: email,
    });

    if (!user) {
      return res.status(404).json({
        message: "No user found",
      });
    }

    const passwordMatch = await bcrypt.compare(password, user.password);
    console.log(user);

    if (user && passwordMatch) {
      const token = jwt.sign(
        {
          id: user._id.toString(),
        },
        jwt_secrete
      );
      return res.status(200).json({
        success: true,
        message: "Logged in successfully",
        token,
      });
    } else {
      res.status(403).json({
        message: "invalid credentials",
        success: false,
      });
    }
  } catch (error) {
    console.log(error);
  }
});
